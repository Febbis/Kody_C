Write a program that copies all even bytes from TAB_ROM to TAB_RAM, one by one. If the 
TAB_RAM table is larger than the TAB_ROM, the program will continue to copy bytes to the 
end of the TAB_RAM table, starting from the beginning of the TAB_ROM table. After that 
:Turn LED connected to PortB.5 exactly: 500ms - ON and 500ms - OFF, 500ms - ON and then 
switch to OFF.

#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>
#include <avr/pgmspace.h>
#include <avr/interrupt.h>
#define nLength 100
uint8_t TAB_RAM[nLength];
//-----------this is table with data example --------------------------------------
//please correct end of this table according to the guidelines given by the teacher
uint8_t const TAB_ROM[] PROGMEM = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
0x0E, 0x1F,
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
0x1F, 0x1F,
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D,
0x2E, 0x2F,
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D,
0x3E, 0x3F,
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D,
0x4E, 0x4F,
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D,
0x5E, 0x5F,
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D,
0x6E, 0x6F,
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D,
0x7E, 0x7F,
0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D,
0x8E, 0x8F,
0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D,
0x9E, 0x9F,
0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaA, 0xaB, 0xaC, 0xaD,
0xAE, 0xAF,
0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD,
0xBE, 0xBF,
0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD,
0xCE, 0xCF,
0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED,
0xEE, 0xEF,
0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2,
0xF1, 0xF0,
0xFF, 0xFF};
volatile uint8_t counter = 0;
volatile uint8_t flag_end = 1;
ISR(TIMER1_OVF_vect)
{
TCNT1 = 34285;
counter = 1;
}
int main (void)
{
DDRB=0b11100000;
PORTB=0x000;
PORTB |= (1 << 5);
int i = 0;
int j = 0;
uint32_t x = pgm_get_far_address(TAB_ROM);
x = x >> 13;
x = x & 0x00000003;
RAMPZ = x;
TCNT1 = 34285;
TIMSK1 |= (1 << TOIE1); // Włączenie przerwań przepełniania licznika
sei();
while (pgm_read_word_far(&TAB_ROM[i]) != 0xFF && j < nLength) {
if(i % 2 == 0) {
TAB_RAM[j] = pgm_read_byte_far(&TAB_ROM[i]);
j++;
}
i++;
}
TCCR1B |= (1<<CS12);
PORTB &= ~(1 << 5); //zapalenie diody B5 (natychmiast)
while(counter == 0);
PORTB |= (1 << 5); //zgaszenie diody B5 po 500ms
counter = 0;
while(counter == 0);
PORTB &= ~(1 << 5); //zapalenie diody B5 po 500ms
counter = 0;
while(counter == 0);
PORTB |= (1 << 5); //zgaszenie diody B5 po 500ms
counter = 0;
while(counter == 0);
PORTB &= ~(1 << 5); //zapalenie diody B5 po 500ms
counter = 0;
while(counter == 0);
PORTB |= (1 << 5); //koniec programu
TCCR1B &= ~(1<<CS12);
TCNT1 = 0;
TIMSK1 &= ~(1 << TOIE1);
}
